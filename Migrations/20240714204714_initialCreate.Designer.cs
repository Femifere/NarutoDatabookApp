// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NarutoDatabookApp.Data;

#nullable disable

namespace NarutoDatabookApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240714204714_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NarutoDatabookApp.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("TeamId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.CharacterRanking", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("RankingId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "RankingId");

                    b.HasIndex("RankingId");

                    b.ToTable("CharacterRankings");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.CharacterSpecialty", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("CharacterSpecialties");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Fan", b =>
                {
                    b.Property<int>("FanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FanId"), 1L, 1);

                    b.Property<DateTime>("DateWatched")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RankingId")
                        .HasColumnType("int");

                    b.HasKey("FanId");

                    b.HasIndex("RankingId");

                    b.ToTable("Fans");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Ranking", b =>
                {
                    b.Property<int>("RankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankingId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RankingId");

                    b.ToTable("Rankings");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialtyId");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("int");

                    b.Property<int?>("VillageId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("VillageId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Village", b =>
                {
                    b.Property<int>("VillageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VillageId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("VillageId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Character", b =>
                {
                    b.HasOne("NarutoDatabookApp.Models.Team", "Team")
                        .WithMany("Characters")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.CharacterRanking", b =>
                {
                    b.HasOne("NarutoDatabookApp.Models.Character", "Character")
                        .WithMany("CharacterRankings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NarutoDatabookApp.Models.Ranking", "Ranking")
                        .WithMany("CharacterRankings")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.CharacterSpecialty", b =>
                {
                    b.HasOne("NarutoDatabookApp.Models.Character", "Character")
                        .WithMany("CharacterSpecialties")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NarutoDatabookApp.Models.Specialty", "Specialty")
                        .WithMany("CharacterSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Fan", b =>
                {
                    b.HasOne("NarutoDatabookApp.Models.Ranking", "Ranking")
                        .WithMany("Fans")
                        .HasForeignKey("RankingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Team", b =>
                {
                    b.HasOne("NarutoDatabookApp.Models.Village", "Village")
                        .WithMany("Teams")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Village");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Character", b =>
                {
                    b.Navigation("CharacterRankings");

                    b.Navigation("CharacterSpecialties");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Ranking", b =>
                {
                    b.Navigation("CharacterRankings");

                    b.Navigation("Fans");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Specialty", b =>
                {
                    b.Navigation("CharacterSpecialties");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Team", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("NarutoDatabookApp.Models.Village", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
